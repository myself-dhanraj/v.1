#include <iostream>
#include <vector>
using namespace std;

int binarySearch (vector<int> arr , int tar){
    int st=0 , end = arr.size()-1 ; 
    while(st<= end){
        int mid = st + (end-st)/2;
        
        if(tar > arr[mid]){
            st = mid + 1; //2nd half
        }else if (tar<arr[mid]){
            end = mid - 1; //1st half
        }else{
            return mid;
            
        }
        
    }
    return -1;
}

int main(){
    
    vector<int> arr1 = {-1,0,3,4,5,9,12};
    int tar1 = 12;
    
    cout<<binarySearch(arr1 , tar1)<<endl;
    
    
    vector<int> arr2 = {-1,0,3,5,9,12};
    int tar2 = 0;
    
    cout<<binarySearch(arr2 , tar2)<<endl;
    

}

RERCURSIVE BS
#include <iostream>
#include <vector>
using namespace std;

int recBinarySearch(vector<int>arr, int tar , int st , int end){
    
    if(st<= end){
        int mid = st + (end-st)/2;
        
        if(tar > arr[mid]){
            return recBinarySearch(arr ,tar ,mid + 1 ,end);
        }else if (tar<arr[mid]){
            return recBinarySearch(arr,tar,st,mid - 1);
        }else{
            return mid;
            
        }
        
    }
    return -1;
}

int main(){
    
    vector<int> arr1 = {-1,0,3,4,5,9,12};
    int tar1 = 12;
    
    //cout<<recBinarySearch(arr1 , tar1)<<endl;
    
    
    vector<int> arr2 = {-1,0,3,5,9,12};
    int tar2 = 10;
    
    cout<<recBinarySearch(arr2,tar2)<<endl;
    return 0;
    

}

LEET CODE PEAK INDEX

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& A) {
        int st = 1 ; int end = A.size()-2;

        while(st <= end){
            int mid = st + (end - st)/2;

            if(A[mid - 1] < A[mid] && A[mid]> A[mid+1]){
                return mid;
            }
            else if(A[mid-1] < A[mid]){
                st = mid + 1;
            }
            else {
                end = mid -1;
            }
        }
        return -1;
        
    }
};

LEET CODE SINGLE ELEMENT IN A SORTED ARRAY.
class Solution {
public:
    int singleNonDuplicate(vector<int>& A) {
        int n = A.size();

        if(n==1) return A[0];

        int st = 0; int end = n-1;
        while(st<=end){
            int mid = st + (end - st)/2;
            if(mid == 0 && A[0] != A[1]) return A[mid];
            if (mid == n-1 && A[n-1] != A[n-2]) return A[mid];
            if(A[mid - 1] != A[mid] && A[mid]!=A[mid + 1]) return A[mid];
            
            if(mid % 2 == 0){ //even
                if(A[mid - 1] == A[mid]){ //left
                    end = mid - 1;
                }else{ //right
                    st = mid + 1;
                }
            }else{ //odd numbers
                if(A[mid - 1] == A[mid]){ //right
                    st = mid + 1; 
                }else{ //left
                    end = mid - 1;
                }
            }
        }
        return -1;
        
    }
};
