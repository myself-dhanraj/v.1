vectors:

#include <iostream>
#include <vector>
using namespace std;

int main(){
    
    
    vector<int> arr; //0
    arr.push_back(5);
    arr.push_back(1);
    arr.push_back(5);
    arr.pop_back();
    arr.emplace_back(7);
    
    for(int val : arr){
        cout<<val<<" "<<endl;
    }
    
    cout<<arr.size()<<endl;
    cout<<arr.capacity()<<endl;
    cout<<arr.at(2)<<endl;
    cout<<arr.front()<<endl;
    cout<<arr.back()<<endl;

    
}

erase : 

#include <iostream>
#include <vector>
using namespace std;

int main(){
    
    vector<int> arr = {1,2,3,4,5};
    
    arr.erase(arr.begin() + 1 , arr.begin()+4); // 4 is not included in that 
    
    for(int val : arr){
        cout<<val<<endl;
    }
    
}

INSERT & clear :
include <iostream>
#include <vector>
using namespace std;

int main(){
    
    vector<int> arr = {1,2,3,4,5};
    
    arr.insert(arr.begin() + 1 , 100 ); // 4 is not included in that 
    
    arr.clear(); // clears everything
    
    for(int val : arr){
        cout<<val<<endl;
    }
    
    cout<<arr.size()<<endl;// got cleared
    cout<<arr.capacity()<<endl; // but remains same
    
}

LIST :
#include <iostream>
#include <vector>
#include<list>
using namespace std;

int main(){
    list<int> l;
    
    l.emplace_back(8);
    l.push_back(7);
    l.push_back(6);
    l.push_front(5);
    l.push_front(4);
    l.emplace_front(3);
    l.pop_back();
    l.pop_front();
    
    for(int val : l){
        cout<<val<<endl;
    }
    
   
    
}

#include <iostream>
#include <vector>
#include<list>
#include<deque>
using namespace std;

int main(){
    deque<int> d = {1,2,3,4,5,6}; // access is possible
    list<int> l = {6,5,4,3,2,1}; // gives error as not possible
    d.emplace_back(8);
    
    
    cout<<d[3]<<endl;
    cout<<l[3]<<endl;
    
}

PAIRS:
#include <iostream>
#include <vector>
#include<list>
#include<deque>
using namespace std;

int main(){
    
    pair<int,string> pr={18,"teju"};
    
    cout<<pr.first<<endl;
    cout<<pr.second<<endl;
    
}

#include <iostream>
#include <vector>
#include<list>
#include<deque>
using namespace std;

int main(){
    
    pair<int,pair<int,string>> pr = {03,{18,"teju"}}; //pair of pairs
    
    cout<<pr.first<<endl;
    cout<<pr.second.first<<endl;
    cout<<pr.second.second<<endl;
    
}

vectors in pairs:
#include <iostream>
#include <vector>
#include<list>
#include<deque>
using namespace std;

int main(){
    
    vector<pair<int,int>> arr = {{1,2},{3,4},{5,6}};
    
    arr.push_back({7,8}); // we have to define
    arr.emplace_back(9,10); // automatically does the job
    
    for(pair<int,int> p : arr){
        cout<< p.first <<" "<< p.second <<endl;
    }
    return 0;
    
    
}

STACK:
TO GET ALL THE VALUES IN THE STACK

#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
using namespace std;

int main(){
    
    stack<int> st;
    st.push(5);
    st.push(4);
    st.push(3);
    st.push(2);
    st.push(1);
    
    while(!st.empty()){
        cout<<st.top()<<endl;
        st.pop();
    }
    
}

#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
using namespace std;

int main(){
    
    stack<int> st;
    st.push(5);
    st.push(4);
    st.push(3);
    st.push(2);
    st.push(1);
    
    stack<int> st2;
    
    st2.swap(st);
    
    cout<<st.size()<<endl; // 0
    cout<<st2.size()<<endl; // 5
    
}

QUEUE:
#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
#include<queue>
using namespace std;

int main(){
    
    queue<int> q;
    q.push(5);
    q.push(4);
    q.push(3);
    q.push(2);
    q.push(1);
    
    while(!q.empty()){
        cout<<q.front()<<endl;
        q.pop();
    }

}

#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
#include<queue>
using namespace std;

int main(){
    
    queue<int> q;
    q.push(5);
    q.push(4);
    q.push(3);
    q.push(2);
    q.push(1);
    
  
    queue<int> q2;
     
    q2.swap(q); //swap
    
    cout<<q2.size()<<endl;
    
    cout<<q.size()<<endl;

    
}

PRIORITY QUEUE:
STRAIGHT ORDER 
#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
#include<queue>
using namespace std;

int main(){
    
    priority_queue<int> q;
    q.push(5);
    q.push(10);
    q.push(300);
    q.push(26);
    q.push(123);
    
    while(!q.empty()){
        cout<<q.top()<<" ";
        q.pop();
    }
    
}
Reverse order:
#include <iostream>
#include <vector>
#include<list>
#include<deque>
#include<stack>
#include<queue>
using namespace std;

int main(){
    
    priority_queue<int,vector<int>,greater<int>> q;
    q.push(5);
    q.push(10);
    q.push(300);
    q.push(26);
    q.push(123);
    
    while(!q.empty()){
        cout<<q.top()<<" ";
        q.pop();
    }
    
}
